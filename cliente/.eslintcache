[{"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/index.js":"1","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/reportWebVitals.js":"2","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Routing.js":"3","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/navBar.js":"4","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/main.js":"5","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/libros.js":"6","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/editoriales.js":"7","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/autores.js":"8","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/almacenes.js":"9","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/librosAlmacen.js":"10","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/Login.js":"11","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/EncryptionHandler.js":"12","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/Register.js":"13","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/clientes.js":"14","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/ProtectedRoutes.js":"15","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/carrito.js":"16","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/userContext.js":"17"},{"size":551,"mtime":1611739497946,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1610809704165,"results":"20","hashOfConfig":"19"},{"size":2215,"mtime":1611852450826,"results":"21","hashOfConfig":"19"},{"size":3456,"mtime":1611784699178,"results":"22","hashOfConfig":"19"},{"size":13379,"mtime":1611855024684,"results":"23","hashOfConfig":"19"},{"size":18550,"mtime":1611854724083,"results":"24","hashOfConfig":"19"},{"size":12629,"mtime":1611731130841,"results":"25","hashOfConfig":"19"},{"size":13307,"mtime":1611650757734,"results":"26","hashOfConfig":"19"},{"size":12235,"mtime":1611682924232,"results":"27","hashOfConfig":"19"},{"size":11889,"mtime":1611735530257,"results":"28","hashOfConfig":"19"},{"size":3333,"mtime":1611785399013,"results":"29","hashOfConfig":"19"},{"size":740,"mtime":1611536237412,"results":"30","hashOfConfig":"19"},{"size":5656,"mtime":1611596799690,"results":"31","hashOfConfig":"19"},{"size":3635,"mtime":1611647740016,"results":"32","hashOfConfig":"19"},{"size":775,"mtime":1611852706158,"results":"33","hashOfConfig":"19"},{"size":8817,"mtime":1611857655776,"results":"34","hashOfConfig":"19"},{"size":88,"mtime":1611785639456,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1n0huas",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/index.js",[],["77","78"],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/reportWebVitals.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Routing.js",["79"],"import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Main from './Vistas/main'\nimport Libros from './Vistas/libros';\nimport Autores from './Vistas/autores';\nimport Editoriales from './Vistas/editoriales';\nimport Almacenes from './Vistas/almacenes';\nimport LibrosAlmacen from './Vistas/librosAlmacen';\nimport Login from './Vistas/Login';\nimport Register from './Vistas/Register'; \nimport Clientes from './Vistas/clientes'; \nimport Carrito from './Vistas/carrito';\nimport NavBar from './navBar'; \nimport ProtectedRoute from './ProtectedRoutes';\nimport { UserContext } from './userContext';\nimport { useState, useEffect } from 'react';\n\nexport default function Rutas() {\n  const [user, setUser] = useState();\n\n  useEffect(() => {\n    setUser(JSON.parse(localStorage[\"appState\"]).isLoggedIn);\n    console.log(JSON.parse(localStorage[\"appState\"]).isLoggedIn);\n  });\n\n  return (\n    <div className=\"App\">\n        <Router>\n            <UserContext.Provider value={{user, setUser}}>\n              <NavBar></NavBar>\n              <Switch>\n                  <Route exact path=\"/\" component={Login}></Route>\n                  {/*<Route path=\"/login\" component={Login}></Route>*/}\n                  <Route path=\"/register\" component={Register}></Route>\n                  <ProtectedRoute path=\"/main\" component={Main}></ProtectedRoute>\n                  <ProtectedRoute path=\"/libros\" component={Libros}></ProtectedRoute>\n                  <ProtectedRoute path=\"/autores\" component={Autores}></ProtectedRoute>\n                  <ProtectedRoute path=\"/editoriales\" component={Editoriales}></ProtectedRoute>\n                  <ProtectedRoute path=\"/clientes\" component={Clientes}></ProtectedRoute>\n                  <ProtectedRoute path=\"/almacenes\" component={Almacenes}></ProtectedRoute>\n                  <ProtectedRoute path=\"/librosAlmacen\" component={LibrosAlmacen}></ProtectedRoute>\n                  <ProtectedRoute path=\"/carrito\" component={Carrito}></ProtectedRoute>\n                  <Route path=\"/*\" component= {() => {return <div style={{paddingTop: \"60px\"}}>\"404 not found!\"</div>}}></Route>\n              </Switch>\n            </UserContext.Provider>\n        </Router>\n    </div>\n  );\n}\n","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/navBar.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/main.js",["80","81"],"import React from 'react';\nimport Carousel from 'react-multi-carousel';\nimport { Container, FormControl, Alert} from 'react-bootstrap'; \nimport \"react-multi-carousel/lib/styles.css\";\nimport '../../SCSS/libreria.scss';\nimport 'react-notifications/lib/notifications.css';\nimport {NotificationManager} from 'react-notifications';\nimport NotificationContainer from 'react-notifications/lib/NotificationContainer';\n\nexport default class Main extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            libros: [],\n            terror: [],\n            ciencia_ficcion: [],\n            drama:[],\n            suspenso: [],\n            open: false,\n            tipo: '',\n            alerta: false,\n            msgAlerta: \"\",\n            tipoAlerta: \"success\",\n        }\n    }\n\n    createNotification(type){\n        return () => {\n          switch (type) {\n            case 'success':\n              NotificationManager.success('', 'Agregado al carrito!');\n              break;\n            case 'error':\n              NotificationManager.error('Intente mÃ¡s tarde', 'Error', 3000);\n              break;\n          }\n        }\n    };\n\n    componentDidMount(){\n        this.fetchLibros();\n        this.fetchLibrosGenero(\"terror\",\"Terror\");\n        this.fetchLibrosGenero(\"ciencia_ficcion\",\"Ciencia%20Ficcion\");\n        this.fetchLibrosGenero(\"drama\",\"Drama\");\n        this.fetchLibrosGenero(\"suspenso\",\"Suspenso\"); \n    }\n\n    onCloseHandler = (e) => {\n        this.setState({\n            open: false,\n        });\n    }\n\n    handleChange = (evt) => {\n        this.setState({\n          [evt.target.name]: evt.target.value,\n        });\n    };\n\n    fetchLibros = async () => {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        fetch(\"http://127.0.0.1:8000/libros\", {\n            method: \"GET\",\n            headers: headers,\n        })\n        .then((respuesta) => respuesta.json())\n        .then((resultado) => {\n            console.log(resultado);\n            this.setState({\n                libros: resultado,\n            });\n        }).catch((error) => console.log(\"error: \", error));\n    }\n    \n    fetchLibrosGenero = async (neumonic, genero) => {\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        fetch(`http://127.0.0.1:8000/generos/${genero}`, {\n            method: \"GET\",\n            headers: headers,\n        })\n        .then((respuesta) => respuesta.json())\n        .then((resultado) => {\n            console.log(resultado);\n            this.setState({\n                [neumonic]: resultado,\n            });\n        }).catch((error) => console.log(\"error: \", error));\n    }\n\n    insertarCarrito = (item) => {\n        if(this.state.tipo !== \"\"){\n            var headers = new Headers();\n            headers.append(\"Content-Type\", \"application/json\");\n            var body = JSON.stringify({\n                email: JSON.parse(localStorage[\"appState\"]).user.email,\n                id_libro: item.id_libro,\n                tipo: this.state.tipo,\n                cantidad: 1,\n            });\n            console.log(\"A enviar: \", body);\n            fetch(\"http://localhost:8000/carrito\", {        //revisar que efectivamente sea ../insert\n                method: \"POST\",\n                headers: headers,\n                body: body\n            })\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => {\n                this.setState({\n                    alerta: true,\n                    msgAlerta: resultado.status,\n                    tipoAlerta: resultado.tipo\n                })\n            console.log(resultado);    \n        });\n        } else {\n            console.log(\"Error\");\n        }\n    }\n\n    render(){\n        const responsive = {\n            superLargeDesktop: {\n              breakpoint: { max: 4000, min: 3000 },\n              items: 5\n            },\n            desktop: {\n              breakpoint: { max: 3000, min: 1024 },\n              items: 3\n            },\n            tablet: {\n              breakpoint: { max: 1024, min: 464 },\n              items: 2\n            },\n            mobile: {\n              breakpoint: { max: 464, min: 0 },\n              items: 1\n            }\n          };\n        return(\n            <main className=\"cuerpo\">\n                <div className=\"banner\">\n                    <p className=\"bottom\"><strong>Conoce un mundo<br></br>lleno de imaginacion</strong></p>\n                </div>\n                    {this.state.alerta === true ? (\n                      <Alert variant={this.state.tipoAlerta} onClose={() => {\n                        this.setState({\n                          alerta: false,\n                        })\n                      }} dismissible>\n                        <Alert.Heading>{this.state.msgAlerta}</Alert.Heading>\n                      </Alert>\n                    ) : null}\n                    <section className=\"secciones\">\n                    <Container className=\"titulos\">Nuestra mejor seleccion de libros</Container>\n                    <Carousel  ssr containerClass=\"first-carousel-container\" className=\"popular\" responsive={responsive} infinite={true} swipeable={true} removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}>\n                        {this.state.libros.map((item, index) => {\n                            return (\n                                <div key={index} className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n                                    <Book titulo={item.titulo} author=\"prueba\" portada={item.url} ></Book>\n                                    <FormControl as=\"select\" name=\"tipo\" onChange={this.handleChange}>\n                                        <option value=\"\">Seleccione el tipo</option>\n                                        <option disabled={!(item.precio_fisico)} value={\"Fisico\"}>Fisico ${item.precio_fisico}</option>\n                                        <option disabled={!(item.precio_electronico)} value={\"Electronico\"}>Electronico ${item.precio_electronico}</option>\n                                    </FormControl>\n                                    <button className=\"btn-agregar-carro\" onClick={() => {this.insertarCarrito(item)}}>+</button>\n                                </div>\n                            );\n                        })}\n                        <NotificationContainer/>\n                        </Carousel>\n                </section>\n                <section className=\"secciones\">\n                    <Container className=\"titulos\">Ciencia Ficcion</Container>\n                    <Carousel ssr containerClass=\"first-carousel-container\" className=\"popular\" responsive={responsive} infinite={true} swipeable={true} removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}>\n                        {this.state.ciencia_ficcion.map((item, index) => {\n                            return (\n                                <div key={index} className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n                                    <Book titulo={item.titulo} author=\"prueba\" portada={item.url} ></Book>\n                                    <FormControl as=\"select\" name=\"tipo\" onChange={this.handleChange}>\n                                        <option value=\"\">Seleccione el tipo</option>\n                                        <option disabled={!(item.precio_fisico)} value={\"Fisico\"}>Fisico ${item.precio_fisico}</option>\n                                        <option disabled={!(item.precio_electronico)} value={\"Electronico\"}>Electronico ${item.precio_electronico}</option>\n                                    </FormControl>\n                                    <button className=\"btn-agregar-carro\" onClick={() => {this.insertarCarrito(item)}}>+</button>\n                                </div>\n                            );\n                        })}\n                    </Carousel>\n                </section>\n                <section className=\"secciones\">\n                    <Container className=\"titulos\">Terror!</Container>\n                    <Carousel ssr containerClass=\"first-carousel-container\" className=\"popular\" responsive={responsive} infinite={true} swipeable={true} removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}>\n                        {this.state.terror.map((item, index) => {\n                            return (\n                                <div key={index} className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n                                    <Book titulo={item.titulo} author=\"prueba\" portada={item.url} ></Book>\n                                    <FormControl as=\"select\" name=\"tipo\" onChange={this.handleChange}>\n                                        <option value=\"\">Seleccione el tipo</option>\n                                        <option disabled={!(item.precio_fisico)} value={\"Fisico\"}>Fisico ${item.precio_fisico}</option>\n                                        <option disabled={!(item.precio_electronico)} value={\"Electronico\"}>Electronico ${item.precio_electronico}</option>\n                                    </FormControl>\n                                    <button className=\"btn-agregar-carro\" onClick={() => {this.insertarCarrito(item)}}>+</button>\n                                </div>\n                            );\n                        })}\n                    </Carousel>\n                </section>\n                <section className=\"secciones\">\n                    <Container className=\"titulos\">Drama!</Container>\n                    <Carousel ssr containerClass=\"first-carousel-container\" className=\"popular\" responsive={responsive} infinite={true} swipeable={true} removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}>\n                        {this.state.drama.map((item, index) => {\n                            return (\n                                <div key={index} className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n                                    <Book titulo={item.titulo} author=\"prueba\" portada={item.url} ></Book>\n                                    <FormControl as=\"select\" name=\"tipo\" onChange={this.handleChange}>\n                                        <option value=\"\">Seleccione el tipo</option>\n                                        <option disabled={!(item.precio_fisico)} value={\"Fisico\"}>Fisico ${item.precio_fisico}</option>\n                                        <option disabled={!(item.precio_electronico)} value={\"Electronico\"}>Electronico ${item.precio_electronico}</option>\n                                    </FormControl>\n                                    <button className=\"btn-agregar-carro\" onClick={() => {this.insertarCarrito(item)}}>+</button>\n                                </div>\n                            );\n                        })}\n                    </Carousel>\n                </section>\n                <section className=\"secciones\">\n                    <Container className=\"titulos\">Suspenso!</Container>\n                    <Carousel ssr containerClass=\"first-carousel-container\" className=\"popular\" responsive={responsive} infinite={true} swipeable={true} removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}>\n                        {this.state.suspenso.map((item, index) => {\n                            return (\n                                <div key={index} className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n                                    <Book titulo={item.titulo} author=\"prueba\" portada={item.url} ></Book>\n                                    <FormControl as=\"select\" name=\"tipo\" onChange={this.handleChange}>\n                                        <option value=\"\">Seleccione el tipo</option>\n                                        <option disabled={!(item.precio_fisico)} value={\"Fisico\"}>Fisico ${item.precio_fisico}</option>\n                                        <option disabled={!(item.precio_electronico)} value={\"Electronico\"}>Electronico ${item.precio_electronico}</option>\n                                    </FormControl>\n                                    <button className=\"btn-agregar-carro\" onClick={() => {this.insertarCarrito(item)}}>+</button>\n                                </div>\n                            );\n                        })}\n                    </Carousel>\n                </section>\n            </main>\n        );\n    }\n}\n\nclass Book extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            titulo: props.titulo,\n            autor: props.autor,\n            portada: props.portada,\n            precio: props.precio,\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"book\">\n            <div className=\"book-top\">\n                <div className=\"book-title\">{this.state.titulo}</div>\n                <div className=\"book-authors\">{this.state.autor}</div>\n            </div>\n            <img className=\"book-cover\" src={`${this.state.portada}`}></img>\n            {/*<div className=\"book-footer\">\n                <div className=\"book-price\">Precio: ${this.state.precio}</div>\n            </div>*/}\n        </div>\n        );\n    };\n};\n\n//4k -> https://images.wallpaperscraft.com/image/monstera_leaves_art_128418_3840x2400.jpg\n//HD -> https://images.wallpaperscraft.com/image/monstera_leaves_art_128418_1920x1080.jpg\n//https://wallpaperscraft.com/download/monstera_leaves_art_128418/3840x2400\n//Muy buena imagen para algun fondo!","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/libros.js",["82"],"import React from 'react';\nimport {Container, Form, FormControl, FormLabel, Button, Alert, Row, Table} from 'react-bootstrap';\nimport '../../SCSS/Base.scss';\nimport Popup from 'reactjs-popup';\nimport {UserContext} from '../userContext';\n\nexport default class Libros extends React.Component {\n    static contextType = UserContext;\n    constructor(props){\n        super(props);\n        this.state = {\n            registros: [],\n            autores: [],\n            editoriales: [],\n            generos: [],\n            id_autor: \"\",\n            id_libro: \"\",\n            titulo: \"\",\n            isbn: \"\",\n            anio_publicacion: \"\",\n            descripcion: \"\",\n            autor: \"\",\n            editorial: \"\",\n            categoria: \"\",\n            precio_electronico: \"\",\n            precio_fisico: \"\",\n            fecha_impresion: \"\",\n            lugar_impresion: \"\",\n            pdf: \"\",\n            portada_url: \"\",\n            alerta: false,\n            msgAlerta: \"\",\n            tipoAlerta: \"success\",\n            open: false,\n            update: false,\n            update_message: 'Agregar libro',\n        };\n    }\n\n  componentDidMount(){\n      this.fetchRegistros();\n      this.getAutores();\n      this.getEditoriales();\n      this.getGeneros();\n  };\n\n    handleChange = (evt) => {\n        this.setState({\n          [evt.target.name]: evt.target.value,\n        });\n    };\n\n    handlePopupClose = () => {\n      this.setState({\n        id_libro: \"\",\n        isbn: \"\",\n        anio_publicacion: \"\",\n        descripcion: \"\",\n        titulo: \"\",\n        precio_electronico: \"\",\n        precio_fisico: \"\",\n        lugar_impresion: \"\",\n        fecha_impresion: \"\",\n        tamanio: \"\",\n        portada_url: \"\",\n        autor: \"\",\n        editorial: \"\",\n        categoria: \"\",\n        open: false,\n        update: false,\n        update_message: 'Agregar libro',\n      });\n    }\n\n    editControl = (item) => {\n      console.log(item);\n      this.setState({\n        id_libro: item.id_libro,\n        isbn: item.isbn,\n        anio_publicacion: item.anio_publicacion,\n        descripcion: item.descripcion,\n        titulo: item.titulo,\n        precio_electronico: item.precio_electronico,\n        precio_fisico: item.precio_fisico,\n        lugar_impresion: item.lugar_impresion,\n        fecha_impresion: item.fecha_impresion,\n        tamanio: item.tamanio,\n        portada_url: item.url,\n        autor: item.autor,\n        editorial: item.editorial,\n        categoria: item.genero,\n        portada_url: item.url,\n        update: true,\n        update_message: \"Actualizar libro\",\n        open: true,\n      });\n      console.log(\"id: \", item.id_autor);\n    }\n\n    fetchRegistros = () => {\n      let headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n      fetch(\"http://localhost:8000/libros\", {\n        method: \"GET\",\n        headers: headers,\n      })\n        .then((respuesta) => respuesta.json())\n        .then((resultado) => {\n          console.log(\"resultado: \", resultado);\n          this.setState({\n            registros: resultado,\n          });\n      })\n      .catch((error) => console.log(\"error: \", error));\n  };\n\n\n  addRegistro = (e) => {\n      e.preventDefault();\n      var headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n      var body = JSON.stringify({\n          titulo: this.state.titulo,\n          isbn: this.state.isbn,\n          anio_publicacion: this.state.anio_publicacion,\n          descripcion: this.state.descripcion,\n          autor: this.state.autor,\n          editorial: this.state.editorial,\n          categoria: this.state.categoria,\n          ebook: this.state.ebook,\n          precio_electronico: this.state.precio_electronico,\n          tamanio: this.state.tamanio,\n          papel: this.state.papel,\n          precio_fisico: this.state.precio_fisico,\n          lugar_impresion: this.state.lugar_impresion,\n          fecha_impresion: this.state.fecha_impresion,\n          pdf: this.state.pdf,\n          portada_url: this.state.portada_url,\n      });\n      console.log(\"Solicitud mandada a:\", body);\n      fetch(\"http://localhost:8000/libros\", {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      }).then((respuesta) => respuesta.json())\n          .then((resultado) => {\n              console.log(resultado);     //para verificar que se haya recibido\n              this.setState({\n                  id_libro: '',\n                  titulo: '',\n                  isbn: '',\n                  anio_publicacion: '',\n                  descripcion: '',\n                  precio_electronico: '',\n                  tamanio: '',\n                  precio_fisico: '',\n                  lugar_impresion: '',\n                  fecha_impresion: '',\n                  pdf: '',\n                  portada_url: '',\n                  autor: '',\n                  editorial: '',\n                  categoria: '',\n                  alerta: true,\n                  msgAlerta: resultado.status,\n                  tipoAlerta: resultado.tipo,\n                  open: false,\n              });\n              this.fetchRegistros();\n          })\n  }\n\n    editRegistro(e){\n      e.preventDefault();\n      var headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n      var body = JSON.stringify({\n        titulo: this.state.titulo,\n        isbn: this.state.isbn,\n        anio_publicacion: this.state.anio_publicacion,\n        descripcion: this.state.descripcion,\n        autor: this.state.autor,\n        editorial: this.state.editorial,\n        categoria: this.state.categoria,\n        precio_electronico: this.state.precio_electronico,\n        tamanio: this.state.tamanio,\n        precio_fisico: this.state.precio_fisico,\n        lugar_impresion: this.state.lugar_impresion,\n        fecha_impresion: this.state.fecha_impresion,\n        pdf: this.state.pdf,\n        portada_url: this.state.portada_url,\n      })\n      console.log(\"A enviar actualizacion: \", body);\n      fetch(`http://localhost:8000/libros/${this.state.id_libro}`, {        //revisar que efectivamente sea ../insert\n          method: \"PUT\",\n          headers: headers,\n          body: body\n      })\n      .then((respuesta) => respuesta.json())\n      .then((resultado) => {\n          console.log(resultado);    \n          this.setState({\n            id_libro: resultado.id_libro,\n            titulo: '',\n            isbn: '',\n            anio_publicacion: '',\n            descripcion: '',\n            precio_electronico: '',\n            tamanio: '',\n            precio_fisico: '',\n            lugar_impresion: '',\n            fecha_impresion: '',\n            pdf: '',\n            portada: '',\n            autor: '',\n            editorial: '',\n            categoria: '',\n            alerta: true,\n            msgAlerta: resultado.status,\n            tipoAlerta: resultado.tipo,\n            open: false,\n            update: false,\n            update_message: 'Agregar libro',\n          });\n          this.fetchRegistros();\n      });\n    }\n\n    eliminarRegistro(id_libro) {\n      var headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n      fetch(`http://localhost:8000/libros/${id_libro}`, {        //revisar que efectivamente sea ../insert\n          method: \"DELETE\",\n          headers: headers,\n          body: JSON.stringify({}),\n      })\n      .then((respuesta) => respuesta.json())\n      .then((resultado) => {\n          console.log(resultado);    \n          this.setState({\n              alerta: true,\n              msgAlerta: resultado.status,\n              tipoAlerta: resultado.tipo,\n          });\n          this.fetchRegistros();\n      });\n    }\n\n    getAutores = () => {\n      let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        fetch(\"http://localhost:8000/autores\", {\n          method: \"GET\",\n          headers: headers,\n        })\n          .then((respuesta) => respuesta.json())\n          .then((resultado) => {\n            console.log(resultado);\n              this.setState({\n                autores: resultado,\n              });\n        })\n        .catch((error) => {\n          console.log(\"error: \", error)\n          return error;\n      });\n    }\n\n    getEditoriales = () => {\n      let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        fetch(\"http://localhost:8000/editoriales\", {\n          method: \"GET\",\n          headers: headers,\n        })\n          .then((respuesta) => respuesta.json())\n          .then((resultado) => {\n            console.log(resultado);\n              this.setState({\n                editoriales: resultado,\n              });\n        })\n        .catch((error) => {\n          console.log(\"error: \", error)\n          return error;\n      });\n    }\n\n    getGeneros = () => {\n      let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        fetch(\"http://localhost:8000/generos\", {\n          method: \"GET\",\n          headers: headers,\n        })\n          .then((respuesta) => respuesta.json())\n          .then((resultado) => {\n            console.log(resultado);\n              this.setState({\n                generos: resultado,\n              });\n        })\n        .catch((error) => {\n          console.log(\"error: \", error)\n          return error;\n      });\n    }\n\n/************************************************************************************************************************/\n\n    render(){\n        return(\n            <div className=\"main\">\n            <Container>\n            <h1 className=\"h1\">Libros</h1>\n              {\n                this.state.alerta === true ? (\n                  <Alert variant={this.state.tipoAlerta} onClose={() => {\n                    this.setState({\n                      alerta: false,\n                    })\n                  }} dismissible>\n                    <Alert.Heading>{this.state.msgAlerta}</Alert.Heading>\n                  </Alert>\n                ) : null}\n              <Row>\n                <Table striped bordered hover size=\"sm\" >\n                  <thead>\n                    <tr>\n                      <th className=\"align-middle\">ID</th>\n                      <th className=\"align-middle\">Titulo</th>\n                      <th className=\"align-middle\">ISBN</th>\n                      <th className=\"align-middle\">Autor</th>\n                      <th className=\"align-middle\">Editorial</th>\n                      <th className=\"align-middle\">AÃ±o Publicacion</th>\n                      <th className=\"align-middle\">Descripcion</th>\n                      <th className=\"align-middle\">Precio Fisico</th>\n                      <th className=\"align-middle\">Precio Electronico</th>\n                      <th className=\"align-middle\">TamaÃ±o</th>\n                      <th className=\"align-middle\">Genero</th>\n                      <th className=\"align-middle\">Fecha impresion</th>\n                      <th className=\"align-middle\">Lugar Impresion</th>\n                      <th className=\"align-middle\" colSpan=\"2\">Acciones</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.registros.map((item, index) => {\n                      return (\n                        <tr key={item.id_libro}>\n                          <td className=\"align-middle\">{index+1}</td>\n                          <td className=\"align-middle\">{item.titulo}</td>\n                          <td className=\"align-middle\">{item.isbn}</td>\n                          <td className=\"align-middle\">{item.autor}</td>\n                          <td className=\"align-middle\">{item.editorial}</td>\n                          <td className=\"align-middle\">{item.anio_publicacion}</td>\n                          <td className=\"align-middle\">{item.descripcion}</td>\n                          <td className=\"align-middle\">{item.precio_fisico}</td>\n                          <td className=\"align-middle\">{item.precio_electronico}</td>\n                          <td className=\"align-middle\">{item.tamanio}</td>\n                          <td className=\"align-middle\">{item.genero}</td>\n                          <td className=\"align-middle\">{item.fecha_impresion}</td>\n                          <td className=\"align-middle\">{item.lugar_impresion}</td>\n                          <td className=\"align-middle\">\n                            <Button onClick={() => {this.editControl(item)}} variant=\"info\">Actualizar</Button>\n                          </td>\n                          <td key=\"button2\" className=\"align-middle\">\n                            <Button onClick={() => {this.eliminarRegistro(item.id_libro)}} variant=\"danger\">Eliminar</Button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </Table>\n              </Row>\n            </Container>\n            <Button variant=\"info\" onClick={(e) => {this.setState({open: true,})}}>AÃ±adir nuevo</Button>\n            <Popup open={this.state.open} onClose={this.handlePopupClose} position=\"center center\">\n                <Form action=\"http://localhost:3001/libros\" onSubmit={(e) => {this.state.update ?  this.editRegistro(e) : this.addRegistro(e)}}>\n                <h2>Registro de libro</h2><hr></hr>\n                <Container className=\"contenedor-1\">\n                    <Container className=\"propietarios\">\n                        <FormLabel>Titulo:</FormLabel>\n                        <FormControl type=\"text\" name=\"titulo\" placeholder=\"TÃ­tulo.\" onChange={this.handleChange} value={this.state.titulo} required={true}/>\n                        <FormLabel>ISBN:</FormLabel>\n                        <FormControl type=\"text\" name=\"isbn\" placeholder=\"ISBN.\" onChange={this.handleChange} value={this.state.isbn} required={true}/>\n                        <FormLabel>AÃ±o de publicaciÃ³n:</FormLabel> \n                        <FormControl type=\"text\" name=\"anio_publicacion\" placeholder=\"AÃ±o de publicaciÃ³n.\" onChange={this.handleChange} value={this.state.anio_publicacion}/>\n                    </Container>\n                    <Container className=\"foraneos\">\n                        <FormLabel>Autor:</FormLabel>\n                        <FormControl as=\"select\" name=\"autor\" onChange={this.handleChange} value={this.state.autor} required>\n                          <option value=\"\">Seleccione el autor</option>\n                            {this.state.autores.map((item, index) =>{\n                              return (\n                                <option key={index} value={item.autor}>{item.nombre}</option>\n                              );\n                            })\n                          }\n                        </FormControl>\n                        <FormLabel>Editorial:</FormLabel>\n                        <FormControl as=\"select\" name=\"editorial\" onChange={this.handleChange} value={this.state.editorial} required>\n                        <option value=\"\">Seleccione la editorial</option>\n                            {this.state.editoriales.map((item, index) =>{\n                              return (\n                                <option key={index} value={item.editorial}>{item.nombre}</option>\n                              );\n                            })\n                          }\n                        </FormControl>\n                        <FormLabel>Categoria:</FormLabel>\n                        <FormControl as=\"select\" name=\"categoria\" onChange={this.handleChange} value={this.state.categoria} required>\n                          <option value=\"\">Seleccione la categoria</option>\n                          {this.state.generos.map((item, index) =>{\n                              return (\n                                <option key={index} value={item.genero}>{item.genero}</option>\n                              );\n                            })\n                          }\n                        </FormControl>\n                    </Container>\n                </Container>\n                <Container className=\"contenedor-2\">\n                    <Container className=\"largos\">\n                        <FormLabel>Descripcion:</FormLabel>\n                        <FormControl type=\"text\" name=\"descripcion\" placeholder=\"DescripciÃ³n.\" onChange={this.handleChange} value={this.state.descripcion || ''}/>\n                        <FormLabel>Portada (URL):</FormLabel>\n                        <FormControl type=\"url\" name=\"portada_url\" placeholder=\"URL de la imagen de portada.\" onChange={this.handleChange} value={this.state.portada_url || ''}/>    \n                    </Container>\n                </Container><br></br>\n                <Container className=\"contenedor-3\">\n                    <Container className=\"electronico\">\n                        <h4>ElectrÃ³nico:</h4>\n                        <FormLabel>Precio:</FormLabel>\n                        <FormControl type=\"number\" name=\"precio_electronico\" placeholder=\"Precio del ebook.\" onChange={this.handleChange} value={this.state.precio_electronico}/>\n                        <FormLabel>TamaÃ±o:</FormLabel>\n                        <FormControl type=\"number\" name=\"tamanio\"  placeholder=\"TamaÃ±o en MB.\" onChange={this.handleChange} value={this.state.tamanio}/>\n                        <FormLabel>Archivo:</FormLabel>\n                        <FormControl type=\"file\" name=\"pdf\" placeholder=\"PDF del libro.\" onChange={this.handleChange} value={this.state.pdf}/>\n                    </Container>\n                    <Container className=\"papel\">\n                        <h4>FÃ­sico:</h4>\n                        <FormLabel>Precio:</FormLabel>\n                        <FormControl type=\"number\" name=\"precio_fisico\" placeholder=\"Precio del libro impreso.\" onChange={this.handleChange} value={this.state.precio_fisico}/>\n                        <FormLabel>Lugar de impresiÃ³n:</FormLabel>\n                        <FormControl type=\"text\" name=\"lugar_impresion\" placeholder=\"Lugar de impresiÃ³n.\" onChange={this.handleChange} value={this.state.lugar_impresion}/>\n                        <FormLabel>Fecha de impresiÃ³n:</FormLabel>\n                        <FormControl type=\"date\" name=\"fecha_impresion\" onChange={this.handleChange} value={this.state.fecha_impresion}/>\n                    </Container>\n                </Container>\n                <Button type=\"submit\" id=\"btnSend\" variant=\"primary\" block>{this.state.update_message}</Button><br></br>\n                </Form>\n            </Popup>\n          </div>\n        );\n    }\n}\n","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/editoriales.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/autores.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/almacenes.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/librosAlmacen.js",["83"],"import React from 'react';\nimport {Container,Form, FormControl, FormLabel, Button, Alert, Row, Table} from 'react-bootstrap';\nimport '../../SCSS/Base.scss'\nimport Popup from 'reactjs-popup';\nimport { Link } from 'react-router-dom'; \n\nexport default class Almacenes extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            registros: [],\n            almacenes: [],\n            libros: [],\n            autores: [],\n            id_libro: \"\",\n            id_autor: \"\",\n            id_almacen: \"\",\n            titulo: \"\",\n            nombre_alm: \"\",\n            autor: \"\",\n            editorial: \"\",\n            isbn: \"\",\n            stock: \"\",\n            alerta: false,\n            msgAlerta: \"\",\n            tipoAlerta: \"success\",\n            open: false,\n            update: false,\n            update_message: 'Agregar libro en almacen',\n        };\n    }\n\n    componentDidMount(){\n      this.fetchAlmacenes();\n      this.getAutores();\n    };\n\n    handleChange = (evt) => {\n        this.setState({\n          [evt.target.name]: evt.target.value,\n        });\n        console.log(\"name: \", evt.target.name);\n        console.log(\"value: \", evt.target.value);\n    };\n\n    handlePopupClose = () => {\n      this.setState({\n        id_libro: \"\",\n        id_almacen: \"\",\n        titulo: \"\",\n        nombre_alm: \"\",\n        autor: \"\",\n        stock: \"\",\n        disable_localidades: true,\n        open: false,\n        update: false,\n        update_message: \"Agregar libro en almacen\",\n      });\n    }\n\n    almacenChange = (e) => {\n      this.handleChange(e);\n      this.fetchRegistros(e.target.value);\n    }\n\n    autorChange = (e) => {\n      this.handleChange(e);\n      if (e.target.value !== ''){\n        //let autor = this.state.autores.find(item => item.id_autor === e.target.value).id_autor;\n        console.log(e.target.value)\n        this.getLibrosAutores(e.target.value);\n      } else {\n        this.setState({\n          libros: [],\n        })\n      }\n    } \n\n/************************************************************************************************************************/\n    \n    getAutores = () => {\n        let headers = new Headers();\n          headers.append(\"Content-Type\", \"application/json\");\n          fetch(\"http://localhost:8000/autores\", {\n            method: \"GET\",\n            headers: headers,\n          })\n            .then((respuesta) => respuesta.json())\n            .then((resultado) => {\n              console.log(resultado);\n                this.setState({\n                  autores: resultado,\n                });\n          })\n          .catch((error) => {\n            console.log(\"error: \", error)\n            return error;\n        });\n    }\n\n    getLibrosAutores = (id_autor) => {\n      let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        fetch(`http://localhost:8000/libros/${id_autor}`, {\n          method: \"GET\",\n          headers: headers,\n        })\n          .then((respuesta) => respuesta.json())\n          .then((resultado) => {\n            console.log(resultado);\n              this.setState({\n                libros: resultado,\n              });\n        })\n        .catch((error) => {\n          console.log(\"error: \", error)\n          return error;\n      });\n  }\n\n    fetchAlmacenes = () => {\n      let headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n        fetch(\"http://localhost:8000/almacenes\", {\n          method: \"GET\",\n          headers: headers,\n      })\n      .then((respuesta) => respuesta.json())\n      .then((resultado) => {\n        console.log(\"resultado: \", resultado);\n        this.setState({\n          almacenes: resultado,\n        });\n    })\n      .catch((error) => console.log(\"error: \", error));\n    };\n\n    fetchRegistros = (id_almacen) => {\n      if(id_almacen !== ''){\n        let headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        fetch(`http://localhost:8000/librosAlmacenados/${id_almacen}`, {\n          method: \"GET\",\n          headers: headers,\n        })\n          .then((respuesta) => respuesta.json())\n          .then((resultado) => {\n            console.log(\"resultado: \", resultado);\n            this.setState({\n              registros: resultado,\n            });\n        })\n        .catch((error) => console.log(\"error: \", error));\n      } else {\n        this.setState({\n          registros: [],\n        });\n      }\n    };\n\n    addRegistro = (e) => {\n        e.preventDefault();\n        var headers = new Headers();\n        headers.append(\"Content-Type\", \"application/json\");\n        var body = JSON.stringify({\n            id_almacen: this.state.id_almacen,\n            id_libro: this.state.id_libro,\n            stock: this.state.stock,\n        })\n        console.log(\"A enviar: \",body);\n        fetch(\"http://localhost:8000/librosAlmacenados\", {        //revisar que efectivamente sea ../insert\n            method: \"POST\",\n            headers: headers,\n            body: body\n        }).then((respuesta) => respuesta.json())\n            .then((resultado) => {\n                console.log(resultado);     //para verificar que se haya recibido\n                this.setState({\n                    id_libro: \"\",\n                    id_almacen: \"\",\n                    stock: \"\",\n                    alerta: true,\n                    msgAlerta: resultado.status,\n                    tipoAlerta: \"success\",\n                    disable_localidades: true,\n                    open: false,\n                });\n                this.fetchRegistros();\n            });\n    };\n    \n    eliminarRegistro(id_almacen) {\n      var headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n      fetch(`http://localhost:8000/librosAlmacen/${id_almacen}`, {        //revisar que efectivamente sea ../insert\n          method: \"DELETE\",\n          headers: headers,\n          body: JSON.stringify({})\n      }).then((respuesta) => respuesta.json())\n        .then((resultado) => {\n            console.log(resultado);    \n            this.setState({\n                id_almacen: \"\",\n                id_libro: \"\",\n                stock: \"\",\n                alerta: true,\n                msgAlerta: resultado.status,\n                tipoAlerta: \"success\",\n                disable_localidades: true,\n                open: false,\n                update: false,\n            });\n            this.fetchRegistros();\n        });\n    }\n\n/************************************************************************************************************************/\n\n    render(){\n      return(\n          <div className=\"main\">\n            <Container>\n            <h1 className=\"h1\">Libros almacenados</h1><hr></hr><br></br>\n              {\n                this.state.alerta === true ? (\n                  <Alert variant={this.state.tipoAlerta} onClose={() => {\n                    this.setState({\n                      alerta: false,\n                    })\n                  }} dismissible>\n                    <Alert.Heading>{this.state.msgAlerta}</Alert.Heading>\n                  </Alert>\n                ) : null}\n              <FormLabel>AlmacÃ©n:</FormLabel>                \n              <FormControl as=\"select\" name=\"id_almacen\" placeholder=\"Nombre de almacen\" onChange={this.almacenChange} value={this.state.id_almacen}>\n                <option value=\"\">Seleccione el almacen</option>\n                  {this.state.almacenes.map((item, index) =>{\n                    return (\n                      <option key={index} value={item.id_almacen}>{item.nombre}</option>\n                    );\n                  })\n                }\n              </FormControl>\n              <Row>\n                <Table striped bordered hover size=\"sm\" >\n                  <thead>\n                    <tr>\n                    <th className=\"align-middle\">ID</th>\n                      <th className=\"align-middle\">Titulo</th>\n                      <th className=\"align-middle\">ISBN</th>\n                      <th className=\"align-middle\">Autor</th>\n                      <th className=\"align-middle\">Editorial</th>\n                      <th className=\"align-middle\">Libros en stock</th>\n                      <th className=\"align-middle\">Eliminar</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.registros.map((item, index) => {\n                      return (\n                        <tr key={item.id_libro}>\n                          <td className=\"align-middle\">{index+1}</td>\n                          <td className=\"align-middle\">{item.titulo}</td>\n                          <td className=\"align-middle\">{item.isbn}</td>\n                          <td className=\"align-middle\">{item.autor}</td>\n                          <td className=\"align-middle\">{item.editorial}</td>\n                          <td className=\"align-middle\">{item.stock}</td>\n                          <td key=\"button2\" className=\"align-middle\">\n                            <Button onClick={() => {this.eliminarRegistro(item.id_libro)}} variant=\"danger\">Eliminar</Button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </Table>\n              </Row>\n            </Container>\n            <Button variant=\"info\" onClick={() => {this.setState({open: true,})}}>AÃ±adir libro en almacen</Button>\n            <Popup open={this.state.open} onClose={() => {this.handlePopupClose()}} position=\"bottom center\">\n                    <Form className = \"popup-root\" action=\"http://localhost:3001/libroAlmacen\" onSubmit={(e) => {this.state.update ?  this.editRegistro(e) : this.addRegistro(e)}}>\n                        <h2>Registro de libro en almacÃ©n</h2><hr></hr>\n                        <Container className=\"contenedor-2\">\n                            <div className=\"largos\">\n                                <FormLabel>Autor:</FormLabel>\n                                <FormControl as=\"select\" name=\"id_autor\" placeholder=\"Nombre de autor\" onChangeCapture={this.autorChange} value={this.state.id_autor}>\n                                  <option></option>\n                                  {this.state.autores.map((item, index) => {\n                                      return(\n                                        <option key={index} value={item.id_autor}>{item.nombre}</option>\n                                      );\n                                    })\n                                  }\n                                </FormControl>\n                                <FormLabel>Titulo:</FormLabel>\n                                <FormControl as=\"select\" name=\"id_libro\" placeholder=\"TÃ­tulo.\" onChangeCapture={this.handleChange} value={this.state.id_libro} required={true}>\n                                <option></option>\n                                  {this.state.libros.map((item, index) => {\n                                      return(\n                                        <option key={index} value={item.id_libro} >{item.titulo}</option>\n                                      );\n                                    })\n                                  }\n                                </FormControl>\n                                <FormLabel>Libros en stock:</FormLabel>\n                                <FormControl type=\"number\" name=\"stock\" placeholder=\"Cantidad de libros en stock\" onChange={this.handleChange} value={this.state.stock} required={true}/>\n                            </div>\n                        </Container>\n                        <Button id=\"btnSend\" type=\"submit\" variant=\"primary\" block>\n                            {this.state.update_message}\n                        </Button><br></br>\n                    </Form>\n                </Popup>\n            </div>\n        );\n    }\n}","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/Login.js",["84"],"import React from 'react';\n//Importar el archivo que maneja la encriptacion de datos que se enviaran al lado del servidor!.\nimport '../../SCSS/Login.scss';\nimport { UserContext } from '../userContext';\n\nexport default class Login extends React.Component{\n  static contextType = UserContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        redirect: null,\n        id_cliente: 0,\n        email: \"\",\n        contrasena: \"\",\n        nombre: '',\n        isLoggedIn: false,\n        formSubmiting: false,\n    }; \n  } \n\n  componentDidMount(){\n    let state = localStorage[\"appState\"];\n    if(state) {\n      let AppState = JSON.parse(state);\n      this.setState({\n        isLoggedIn: AppState.isLoggedIn, \n        email: AppState.user.email,\n        id_cliente: AppState.user.id_cliente,\n        nombre: AppState.user.nombre,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"login-box\">\n        <h2>Login</h2>\n        <form onSubmit={this.handleSubmit} action=\"http://localhost:8000/login\">\n          <label htmlFor=\"email\">Correo Electronico</label>\n          <input value={this.state.email} onChange={this.handleChange} name=\"email\" type=\"text\" placeholder=\"Ingrese correo electronico\"></input>\n          <label htmlFor=\"password\">ContraseÃ±a</label>\n          <input value={this.state.contrasena} onChange={this.handleChange} name=\"contrasena\" type=\"password\" placeholder=\"Ingrese la contraseÃ±a\"></input>\n          <input type=\"submit\" value=\"Log In\"></input>\n          <a href=\"/\">Olvidaste tu contraseÃ±a?</a><br></br>\n          <a href=\"/register\">No tienes una cuenta?</a>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { user, setUser } = this.context;\n    let headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    let body = JSON.stringify({\n      email: this.state.email, \n      contrasena: this.state.contrasena\n    });\n    console.log(body);\n    fetch(\"http://localhost:8000/login\", {\n      method: 'POST',\n      headers: headers,\n      body: body,\n    })\n    .then((respuesta) => respuesta.json())\n    .then((resultado) => {\n      console.log(resultado);\n      this.setState({\n          redirect: resultado.redirect,\n          nombre: resultado.nombre,\n          isLoggedIn: resultado.success,\n          id_cliente: resultado.id_cliente,\n      });\n      if(resultado.status_code === 1){\n        setUser(true);\n        let appState = {\n          isLoggedIn: this.state.isLoggedIn,\n          user: {\n            email: resultado.email,\n            nombre: resultado.nombre,\n            id_cliente: resultado.id_cliente,\n          }\n        };\n        localStorage[\"appState\"] = JSON.stringify(appState);\n      } else {\n        setUser(false);\n        let appState = {\n          isLoggedIn: false,\n          user: {\n            email: \"\",\n            nombre: \"\",\n            id_cliente: resultado.id_cliente,\n          }\n        };\n        localStorage[\"appState\"] = JSON.stringify(appState);\n        this.setState({\n          isLoggedIn: appState.isLoggedIn,\n        })\n      }\n      this.props.history.push(resultado.redirect, resultado);\n    })\n    .catch((err) => console.log(\"Error: \", err));\n  };\n\n};\n","/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/EncryptionHandler.js",[],["85","86"],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/Register.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/clientes.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/ProtectedRoutes.js",[],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/Vistas/carrito.js",["87","88","89","90","91"],"/media/panchis/ExtraHDD/Taller Ing. Software/Libreria_Online/cliente/src/Components/userContext.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":20,"column":3,"nodeType":"98","endLine":20,"endColumn":12,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":29,"column":11,"nodeType":"102","messageId":"103","endLine":36,"endColumn":12},{"ruleId":"104","severity":1,"message":"105","line":269,"column":13,"nodeType":"106","endLine":269,"endColumn":71},{"ruleId":"107","severity":1,"message":"108","line":92,"column":9,"nodeType":"109","messageId":"110","endLine":92,"endColumn":20},{"ruleId":"111","severity":1,"message":"112","line":5,"column":10,"nodeType":"98","messageId":"113","endLine":5,"endColumn":14},{"ruleId":"111","severity":1,"message":"114","line":60,"column":13,"nodeType":"98","messageId":"113","endLine":60,"endColumn":17},{"ruleId":"92","replacedBy":"115"},{"ruleId":"94","replacedBy":"116"},{"ruleId":"111","severity":1,"message":"117","line":21,"column":13,"nodeType":"98","messageId":"113","endLine":21,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":157,"column":76,"nodeType":"120","messageId":"121","endLine":157,"endColumn":78},{"ruleId":"122","severity":1,"message":"123","line":158,"column":33,"nodeType":"124","messageId":"125","endLine":162,"endColumn":34},{"ruleId":"111","severity":1,"message":"126","line":194,"column":16,"nodeType":"98","messageId":"113","endLine":194,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":216,"column":17,"nodeType":"106","endLine":216,"endColumn":76},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setUser'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["129"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-dupe-keys","Duplicate key 'portada_url'.","ObjectExpression","unexpected","no-unused-vars","'Link' is defined but never used.","unusedVar","'user' is assigned a value but never used.",["127"],["128"],"'status' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},"Add dependencies array: []",{"range":"132","text":"133"},[885,885],", []"]